/**
 * Drive API
 * Last updated: August 20th, 2024  ### Release Notes  ### 2.0.22 2024/08/20 - Add pdf format for shipping_label configuration  ### 2.0.21 2024/08/20 - Support drive checkout audit signal in Drive v2  ### 2.0.20 2024/08/06 - Add merchant_recommended_substitute_ids to item_options  ### 2.0.19 2024/07/30 - Update pin_code feature enablement information to contact DD  ### 2.0.18 2024/07/16 - Update pin_code description in proof_of_delivery  ### 2.0.17 2024/06/07 - Add \"otc\" to order contains  ### 2.0.16 2024/05/16 - Add \"tobacco\" and \"hemp\" to order contains   ### 2.0.15 2024/02/05 - Add \"catering_setup\" to dropoff options  ### 2.0.14 2024/01/25 - Add \"large_order\" to order fulfillment method  ### 2.0.13 2023/12/08 - Deprecate \'photo_preferred\' from dropoff options  ### 2.0.12 2023/12/06 - Deprecate \'catering\' from order fulfillment method  ### 2.0.11 2023/09/28 - Allow \'dropoff_phone_number\' to be updated in the Accept Quote endpoint  ### 2.0.10 2023/08/07 - Remove \'dropoff_phone_number\' from Accept Quote endpoint  ### 2.0.9 2023/07/26 - Update shipping_label sample string  ### 2.0.8 2023/07/10 - Update Parcels v2 API external_id description - Update shipping_label example  ### 2.0.7 2023/06/28 - Update Drive v2 API errors  ### 2.0.6 2023/06/26 - Allow \'dropoff_phone_number\' to be updated in the Accept Quote endpoint  ### 2.0.5 2023/06/07 - Update printing density enum  ### 2.0.4 2023/06/07 - Added shipping_label to Delivery response  ### 2.0.3 2023/06/05 - Support Midmile in Drive v2  ### 2.0.2 2023/05/17 - Support DSD/DSS in Drive v2  ### 2.0.1 2023/04/25 - Removed URL Markdown in patterns (not supported)  - Updated numerous descriptions  ### 2.0.0 2023/04/25 - Updated numerous descriptions - Reset version to 2.0.0  ### 0.3.3 2023/04/21 - Remove currency field from quote, create and update delivery request in Drive v2  ### 0.3.2 2023/04/12 - Support barcode in Drive v2   ### 0.3.1 2023/04/11 - Updated numerous descriptions   ### 0.3.0 2023/3/02 - Support fee and tax breakdown in Drive v2  ### 0.2.6 2023/1/20 - Support cash on delivery in Drive v2  ### 0.2.5 2023/1/10 - Support promotion ids in Drive v2  ### 0.2.4 2022/10/12 - Support items   ### 0.2.3 2022/10/12 - Support dasher allowed vehicles   ### 0.2.2 2022/08/15 - Support alcohol delivery in drive v2  ### 0.2.1 2022/06/06 - Adding pickup external store and external business ID  ### 0.2.0 2022/04/11 - Support returnable delivery  ### 0.1.4 2022/04/05 - Add dropoff contact given name - Add dropoff contact family name - Add dropoff contact send sms notifications  ### 0.1.3 2022/04/05 - Add pickup verification image url - Add dropoff verification image url  ### 0.1.2 2022/01/27 - Properly marking all required fields  ### 0.1.1 2022/01/13 - Updated contactless flag name - Added parameters to support scheduled deliveries - remove scheduling model  ### 0.0.15 2021/12/07 - addded locale  ### 0.0.14 12/03/2021 - Added driver_reference_tag  ### 0.0.13 (internal release) 2021/11/24 - Added contactless flag - Added tip support - Updated cancellation failure reasons  ### 0.0.12 (internal release) 2021/11/09 - removed tracking url/support reference from input - addded explicit \"delivery outputs\" class  ### 0.0.11 (internal release) 2021/11/05 - added authorization errors  ### 0.0.10 (internal release) 2021/11/01 - external ID is no longer UUID - add support ID to delivery response - add tracking URL for delivery tracking  ### 0.0.9 (internal release) 2021/10/18 - move scheduling_model into it\'s own subtype  ### 0.0.8 (internal release) 2021/10/16 - converted all operations models into types with `allOf` to mixin values - converted all operations parameters to types  ### 0.0.7 (internal release) 2021/10/15 - removed _cents suffix for i18n coolness - removed dropoff/pickup locations from all APIs for now - All addresses are just one string, not nested - Created UUID type - Added optional pickup_business_name/dropoff_business_name  ### 0.0.6 (internal release) 2021/10/14 - rename estimates to quote - add accept quote endpoint - match create and quote input and response  ### 0.0.5 (internal release) 2021/10/12 - order_value_cents is now optional - removed tips - switch to full addresses instead of address_map {city, zipcode etc) - addded optional place name to address field  ### 0.0.4 (internal release) 2021/10/04 - update the estimate & create to have consistent input  ### 0.0.3 (internal release) - combined pickup / dropoff details into Objective type - added optional Location to pickup/dropoff - added new SchedulingModel type (ASAP only for now) to explicitly set scheduling logic  ### 0.0.2 (internal release) - updated statuses logic and enums  ### 0.0.1 (internal release) - initial version
 *
 * The version of the OpenAPI document: 2.0.22
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * What the Dasher should do if the delivery is undeliverable. The default is \"dispose\". See [Create return to pickup deliveries](https://developer.doordash.com/en-US/docs/drive/how_to/return_to_pickup/) for more information.
 * @export
 * @enum {string}
 */
export declare const ActionIfUndeliverable: {
    readonly ReturnToPickup: "return_to_pickup";
    readonly Dispose: "dispose";
};
export type ActionIfUndeliverable = typeof ActionIfUndeliverable[keyof typeof ActionIfUndeliverable];
/**
 * Details about the post-checkout adjustments made to the item. Not settable.
 * @export
 * @interface AdjustmentDetails
 */
export interface AdjustmentDetails {
    /**
     * The source of the item\'s addition
     * @type {string}
     * @memberof AdjustmentDetails
     */
    'addition_source'?: AdjustmentDetailsAdditionSourceEnum;
}
export declare const AdjustmentDetailsAdditionSourceEnum: {
    readonly Dasher: "dasher";
    readonly Customer: "customer";
};
export type AdjustmentDetailsAdditionSourceEnum = typeof AdjustmentDetailsAdditionSourceEnum[keyof typeof AdjustmentDetailsAdditionSourceEnum];
/**
 * An enum that specifies the reason why the item failed audit.\"
 * @export
 * @enum {string}
 */
export declare const AuditFailedReason: {
    readonly ScanMismatch: "scan_mismatch";
    readonly ItemExpired: "item_expired";
};
export type AuditFailedReason = typeof AuditFailedReason[keyof typeof AuditFailedReason];
/**
 * An object that specifies the audit period start and end time, if audit is completed on the Merchants side.
 * @export
 * @interface AuditPeriod
 */
export interface AuditPeriod {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof AuditPeriod
     */
    'start_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof AuditPeriod
     */
    'end_time'?: string;
}
/**
 * Authentication error: the token provided with the request doesn\'t work for the requested operation
 * @export
 * @interface AuthenticationError
 */
export interface AuthenticationError {
    /**
     *
     * @type {string}
     * @memberof AuthenticationError
     */
    'code': AuthenticationErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof AuthenticationError
     */
    'message': string;
}
export declare const AuthenticationErrorCodeEnum: {
    readonly AuthenticationError: "authentication_error";
};
export type AuthenticationErrorCodeEnum = typeof AuthenticationErrorCodeEnum[keyof typeof AuthenticationErrorCodeEnum];
/**
 * Authorization error: the credentials provided with the request don\'t work for the requested operation
 * @export
 * @interface AuthorizationError
 */
export interface AuthorizationError {
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'code': AuthorizationErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof AuthorizationError
     */
    'message': string;
}
export declare const AuthorizationErrorCodeEnum: {
    readonly AuthorizationError: "authorization_error";
};
export type AuthorizationErrorCodeEnum = typeof AuthorizationErrorCodeEnum[keyof typeof AuthorizationErrorCodeEnum];
/**
 *
 * @export
 * @interface CancelNotAllowedError
 */
export interface CancelNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'code': CancelNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof CancelNotAllowedError
     */
    'reason': CancelNotAllowedErrorReasonEnum;
}
export declare const CancelNotAllowedErrorCodeEnum: {
    readonly CancelNotAllowed: "cancel_not_allowed";
};
export type CancelNotAllowedErrorCodeEnum = typeof CancelNotAllowedErrorCodeEnum[keyof typeof CancelNotAllowedErrorCodeEnum];
export declare const CancelNotAllowedErrorReasonEnum: {
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly CancellationWindowClosed: "cancellation_window_closed";
    readonly DuplicateRequest: "duplicate_request";
};
export type CancelNotAllowedErrorReasonEnum = typeof CancelNotAllowedErrorReasonEnum[keyof typeof CancelNotAllowedErrorReasonEnum];
/**
 * Request body for quote accept endpoint
 * @export
 * @interface CheckoutAuditSignalInput
 */
export interface CheckoutAuditSignalInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CheckoutAuditSignalInput
     */
    'external_delivery_id': string;
    /**
     * Whether the audit for the specified delivery passed or failed.
     * @type {boolean}
     * @memberof CheckoutAuditSignalInput
     */
    'is_audit_successful'?: boolean;
    /**
     *
     * @type {AuditPeriod}
     * @memberof CheckoutAuditSignalInput
     */
    'audit_period'?: AuditPeriod;
    /**
     * The count of the items requested for audit
     * @type {number}
     * @memberof CheckoutAuditSignalInput
     */
    'requested_audit_item_count'?: number;
    /**
     * The count of the items that is audited by the Merchant
     * @type {number}
     * @memberof CheckoutAuditSignalInput
     */
    'audited_item_count'?: number;
    /**
     * The items that successfuly passed the audit process.
     * @type {Array<DriveSuccessfulAuditedItem>}
     * @memberof CheckoutAuditSignalInput
     */
    'successful_audit_items'?: Array<DriveSuccessfulAuditedItem>;
    /**
     * The items that failed the audit process.
     * @type {Array<DriveFailedAuditedItem>}
     * @memberof CheckoutAuditSignalInput
     */
    'failed_audit_items'?: Array<DriveFailedAuditedItem>;
    /**
     *
     * @type {CheckoutAuditStatus}
     * @memberof CheckoutAuditSignalInput
     */
    'checkout_audit_status'?: CheckoutAuditStatus;
}
/**
 * Request body for quote accept endpoint
 * @export
 * @interface CheckoutAuditSignalInput1
 */
export interface CheckoutAuditSignalInput1 {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CheckoutAuditSignalInput1
     */
    'external_delivery_id': string;
    /**
     * Whether the audit for the specified delivery passed or failed.
     * @type {boolean}
     * @memberof CheckoutAuditSignalInput1
     */
    'is_audit_successful'?: boolean;
    /**
     *
     * @type {AuditPeriod}
     * @memberof CheckoutAuditSignalInput1
     */
    'audit_period'?: AuditPeriod;
    /**
     * The count of the items requested for audit
     * @type {number}
     * @memberof CheckoutAuditSignalInput1
     */
    'requested_audit_item_count'?: number;
    /**
     * The count of the items that is audited by the Merchant
     * @type {number}
     * @memberof CheckoutAuditSignalInput1
     */
    'audited_item_count'?: number;
    /**
     * The items that successfuly passed the audit process.
     * @type {Array<DriveSuccessfulAuditedItem>}
     * @memberof CheckoutAuditSignalInput1
     */
    'successful_audit_items'?: Array<DriveSuccessfulAuditedItem>;
    /**
     * The items that failed the audit process.
     * @type {Array<DriveFailedAuditedItem>}
     * @memberof CheckoutAuditSignalInput1
     */
    'failed_audit_items'?: Array<DriveFailedAuditedItem>;
    /**
     *
     * @type {CheckoutAuditStatus}
     * @memberof CheckoutAuditSignalInput1
     */
    'checkout_audit_status'?: CheckoutAuditStatus;
}
/**
 * Create audit signal status and details.
 * @export
 * @interface CheckoutAuditSignalResponse
 */
export interface CheckoutAuditSignalResponse {
    /**
     * Whether the audit for the specified delivery was successfully received.
     * @type {boolean}
     * @memberof CheckoutAuditSignalResponse
     */
    'signal_received'?: boolean;
}
/**
 * An enum that specifies the overal audit status of the order. Must be sent for failed_audit_items and not successful_audit_items.\"
 * @export
 * @enum {string}
 */
export declare const CheckoutAuditStatus: {
    readonly Passed: "passed";
    readonly Failed: "failed";
    readonly Skipped: "skipped";
};
export type CheckoutAuditStatus = typeof CheckoutAuditStatus[keyof typeof CheckoutAuditStatus];
/**
 *
 * @export
 * @interface CreateDeliveryInput
 */
export interface CreateDeliveryInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof CreateDeliveryInput
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Merchant warehouse id for the midmile
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'origin_facility_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. Must adhere to E.164 international phone number standard.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     *
     * @type {PickupVerificationMetadata}
     * @memberof CreateDeliveryInput
     */
    'pickup_verification_metadata'?: PickupVerificationMetadata;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof CreateDeliveryInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     *
     * @type {DropoffOptions}
     * @memberof CreateDeliveryInput
     */
    'dropoff_options'?: DropoffOptions;
    /**
     *
     * @type {DropoffAddressComponents}
     * @memberof CreateDeliveryInput
     */
    'dropoff_address_components'?: DropoffAddressComponents;
    /**
     *
     * @type {DropoffPinCodeVerificationMetadata}
     * @memberof CreateDeliveryInput
     */
    'dropoff_pin_code_verification_metadata'?: DropoffPinCodeVerificationMetadata;
    /**
     *
     * @type {ShoppingOptions}
     * @memberof CreateDeliveryInput
     */
    'shopping_options'?: ShoppingOptions;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof CreateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof CreateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof CreateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof CreateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof CreateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof CreateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof CreateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof CreateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     *
     * @type {OrderRouteType}
     * @memberof CreateDeliveryInput
     */
    'order_route_type'?: OrderRouteType;
    /**
     *
     * @type {Array<OrderRouteItem>}
     * @memberof CreateDeliveryInput
     */
    'order_route_items'?: Array<OrderRouteItem>;
}
/**
 * Details about the Dasher assigned to this delivery. Details will be provided once a Dasher has been assigned and has accepted the delivery.
 * @export
 * @interface DasherDetails
 */
export interface DasherDetails {
    /**
     * Unique identifier for the Dasher.
     * @type {number}
     * @memberof DasherDetails
     */
    'dasher_id'?: number;
    /**
     * First name and last initial of the Dasher delivering the order.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_name'?: string;
    /**
     * Phone number for the Dasher; can only be called from dropoff_phone_number. Should include the country code.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number for the Dasher; can only be called from pickup_phone_number. Should include the country code.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DasherDetails
     */
    'dasher_location'?: Location;
    /**
     * Make of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DasherDetails
     */
    'dasher_vehicle_year'?: string;
}
/**
 * Enum to specify vehicle type.
 * @export
 * @enum {string}
 */
export declare const DasherVehicleType: {
    readonly Car: "car";
    readonly Bicycle: "bicycle";
    readonly Walking: "walking";
};
export type DasherVehicleType = typeof DasherVehicleType[keyof typeof DasherVehicleType];
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryBase
 */
export interface DeliveryBase {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryBase
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryBase
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryBase
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Merchant warehouse id for the midmile
     * @type {string}
     * @memberof DeliveryBase
     */
    'origin_facility_id'?: string;
}
/**
 * Delivery drop off details.
 * @export
 * @interface DeliveryDropoffDetails
 */
export interface DeliveryDropoffDetails {
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     *
     * @type {DropoffOptions}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_options'?: DropoffOptions;
    /**
     *
     * @type {DropoffAddressComponents}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_address_components'?: DropoffAddressComponents;
    /**
     *
     * @type {DropoffPinCodeVerificationMetadata}
     * @memberof DeliveryDropoffDetails
     */
    'dropoff_pin_code_verification_metadata'?: DropoffPinCodeVerificationMetadata;
}
/**
 * Delivery input only options ID.
 * @export
 * @interface DeliveryInputOnlyOptions
 */
export interface DeliveryInputOnlyOptions {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryInputOnlyOptions
     */
    'dropoff_window'?: TimeWindow;
}
/**
 * Details about an individual item in the order.
 * @export
 * @interface DeliveryItem
 */
export interface DeliveryItem {
    /**
     * Name of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'name': string;
    /**
     * Description of the item being delivered.
     * @type {string}
     * @memberof DeliveryItem
     */
    'description'?: string;
    /**
     * Quantity of the item being delivered.
     * @type {number}
     * @memberof DeliveryItem
     */
    'quantity': number;
    /**
     * Unique ID generated by the caller for the item.
     * @type {string}
     * @memberof DeliveryItem
     */
    'external_id'?: string;
    /**
     * used to distinguish between multiple items with the same external_id, such as for 2 steaks in the same order with separate weights. Not updatable.
     * @type {string}
     * @memberof DeliveryItem
     */
    'external_instance_id'?: string;
    /**
     * Unit volume of 1 instance of this item, in cubic feet, with or without a decimal point. The overall volume of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'volume'?: number;
    /**
     * Unit weight of 1 instance of this item, in pounds (lbs), with or without a decimal point. The overall weight of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'weight'?: number;
    /**
     * Unit length of 1 instance of this item, in inches, with or without a decimal point.
     * @type {number}
     * @memberof DeliveryItem
     */
    'length'?: number;
    /**
     * Unit weight of 1 instance of this item, in inches, with or without a decimal point.
     * @type {number}
     * @memberof DeliveryItem
     */
    'width'?: number;
    /**
     * Unit weight of 1 instance of this item, in inches, with or without a decimal point.
     * @type {number}
     * @memberof DeliveryItem
     */
    'height'?: number;
    /**
     * Unit price of 1 instance of this item in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599. The overall price of this item is calculated by multiplying this field by quantity.
     * @type {number}
     * @memberof DeliveryItem
     */
    'price'?: number;
    /**
     * Barcode identifying the item. This value must be in one of the following formats: Data Matrix, AZTEC, Code 128, Code 39, Code 93, CODABAR, EAN 13, EAN 8, ITF, UPC A, UPC E, PDF417. Not updatable.
     * @type {string}
     * @memberof DeliveryItem
     */
    'barcode'?: string;
    /**
     * Optional instructions about item, usually requested by customer/merchant
     * @type {string}
     * @memberof DeliveryItem
     */
    'special_instructions'?: string;
    /**
     *
     * @type {ItemOptions}
     * @memberof DeliveryItem
     */
    'item_options'?: ItemOptions;
    /**
     *
     * @type {AdjustmentDetails}
     * @memberof DeliveryItem
     */
    'adjustment_details'?: AdjustmentDetails;
}
/**
 * Details about the individual items included in the order.
 * @export
 * @interface DeliveryItemsDetails
 */
export interface DeliveryItemsDetails {
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryItemsDetails
     */
    'items'?: Array<DeliveryItem>;
}
/**
 * Delivery options ID.
 * @export
 * @interface DeliveryOptions
 */
export interface DeliveryOptions {
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryOptions
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryOptions
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryOptions
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryOptions
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryOptions
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryOptions
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryOptions
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     *
     * @type {OrderRouteType}
     * @memberof DeliveryOptions
     */
    'order_route_type'?: OrderRouteType;
    /**
     *
     * @type {Array<OrderRouteItem>}
     * @memberof DeliveryOptions
     */
    'order_route_items'?: Array<OrderRouteItem>;
}
/**
 * Delivery status and details provided by Doordash.
 * @export
 * @interface DeliveryOutput
 */
export interface DeliveryOutput {
    /**
     * See the [delivery statuses](https://developer.doordash.com/en-US/docs/drive/reference/delivery_statuses) document for detailed descriptions of each status.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'delivery_status'?: DeliveryOutputDeliveryStatusEnum;
    /**
     * The reason why a delivery was cancelled.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'cancellation_reason'?: DeliveryOutputCancellationReasonEnum;
    /**
     * Time when the delivery info was updated in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format; null if delivery is not returnable or already returned.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format; null if return is not returnable or the return is not yet completed.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_time_actual'?: string;
    /**
     * If a delivery is being returned-to-pickup, this is the address where the delivery will be returned.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryOutput
     */
    'fee'?: number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryOutput
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryOutput
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryOutput
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Internal reference for this delivery; reference it when talking or writing to DoorDash support.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'support_reference'?: string;
    /**
     * Tracking page for the delivery that you can use or share with the sender and/or receiver of the delivery. Note: the URL format is not fixed and may change over time.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'tracking_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was dropped off.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was picked up.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'pickup_verification_image_url'?: string;
    /**
     * Link to a picture of the dropoff contact\'s signature that was collected by the Dasher during drop off.
     * @type {string}
     * @memberof DeliveryOutput
     */
    'dropoff_signature_image_url'?: string;
    /**
     *
     * @type {ShippingLabel}
     * @memberof DeliveryOutput
     */
    'shipping_label'?: ShippingLabel;
    /**
     * The items that were dropped because they were not available or suspended and not considered as per the catalog for DSS/DSD Orders.
     * @type {Array<DroppedItem>}
     * @memberof DeliveryOutput
     */
    'dropped_items'?: Array<DroppedItem>;
}
export declare const DeliveryOutputDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export type DeliveryOutputDeliveryStatusEnum = typeof DeliveryOutputDeliveryStatusEnum[keyof typeof DeliveryOutputDeliveryStatusEnum];
export declare const DeliveryOutputCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export type DeliveryOutputCancellationReasonEnum = typeof DeliveryOutputCancellationReasonEnum[keyof typeof DeliveryOutputCancellationReasonEnum];
/**
 * Delivery pickup details.
 * @export
 * @interface DeliveryPickupDetails
 */
export interface DeliveryPickupDetails {
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. Must adhere to E.164 international phone number standard.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryPickupDetails
     */
    'pickup_external_store_id'?: string;
    /**
     *
     * @type {PickupVerificationMetadata}
     * @memberof DeliveryPickupDetails
     */
    'pickup_verification_metadata'?: PickupVerificationMetadata;
}
/**
 * Request body for quote accept endpoint
 * @export
 * @interface DeliveryQuoteAcceptInput
 */
export interface DeliveryQuoteAcceptInput {
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryQuoteAcceptInput
     */
    'tip'?: number;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof DeliveryQuoteAcceptInput
     */
    'dropoff_phone_number'?: string;
}
/**
 * Request body for quote endpoint
 * @export
 * @interface DeliveryQuoteInput
 */
export interface DeliveryQuoteInput {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryQuoteInput
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Merchant warehouse id for the midmile
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'origin_facility_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. Must adhere to E.164 international phone number standard.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_external_store_id'?: string;
    /**
     *
     * @type {PickupVerificationMetadata}
     * @memberof DeliveryQuoteInput
     */
    'pickup_verification_metadata'?: PickupVerificationMetadata;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_address': string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_phone_number': string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     *
     * @type {DropoffOptions}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_options'?: DropoffOptions;
    /**
     *
     * @type {DropoffAddressComponents}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_address_components'?: DropoffAddressComponents;
    /**
     *
     * @type {DropoffPinCodeVerificationMetadata}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_pin_code_verification_metadata'?: DropoffPinCodeVerificationMetadata;
    /**
     *
     * @type {ShoppingOptions}
     * @memberof DeliveryQuoteInput
     */
    'shopping_options'?: ShoppingOptions;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryQuoteInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_window'?: TimeWindow;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryQuoteInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryQuoteInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryQuoteInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryQuoteInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryQuoteInput
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     *
     * @type {OrderRouteType}
     * @memberof DeliveryQuoteInput
     */
    'order_route_type'?: OrderRouteType;
    /**
     *
     * @type {Array<OrderRouteItem>}
     * @memberof DeliveryQuoteInput
     */
    'order_route_items'?: Array<OrderRouteItem>;
}
/**
 * Delivery status and details.
 * @export
 * @interface DeliveryResponse
 */
export interface DeliveryResponse {
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'external_delivery_id': string;
    /**
     * The language DoorDash should use when sending updates about this delivery. Supported locales : `en-US`, `fr-CA`, `es-US`.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'locale'?: string;
    /**
     *
     * @type {OrderFulfillmentMethod}
     * @memberof DeliveryResponse
     */
    'order_fulfillment_method'?: OrderFulfillmentMethod;
    /**
     * Merchant warehouse id for the midmile
     * @type {string}
     * @memberof DeliveryResponse
     */
    'origin_facility_id'?: string;
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. Must adhere to E.164 international phone number standard.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_external_store_id'?: string;
    /**
     *
     * @type {PickupVerificationMetadata}
     * @memberof DeliveryResponse
     */
    'pickup_verification_metadata'?: PickupVerificationMetadata;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof DeliveryResponse
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     *
     * @type {DropoffOptions}
     * @memberof DeliveryResponse
     */
    'dropoff_options'?: DropoffOptions;
    /**
     *
     * @type {DropoffAddressComponents}
     * @memberof DeliveryResponse
     */
    'dropoff_address_components'?: DropoffAddressComponents;
    /**
     *
     * @type {DropoffPinCodeVerificationMetadata}
     * @memberof DeliveryResponse
     */
    'dropoff_pin_code_verification_metadata'?: DropoffPinCodeVerificationMetadata;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryResponse
     */
    'currency': string;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof DeliveryResponse
     */
    'items'?: Array<DeliveryItem>;
    /**
     *
     * @type {ShoppingOptions}
     * @memberof DeliveryResponse
     */
    'shopping_options'?: ShoppingOptions;
    /**
     * See the [delivery statuses](https://developer.doordash.com/en-US/docs/drive/reference/delivery_statuses) document for detailed descriptions of each status.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'delivery_status': DeliveryResponseDeliveryStatusEnum;
    /**
     * The reason why a delivery was cancelled.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'cancellation_reason'?: DeliveryResponseCancellationReasonEnum;
    /**
     * Time when the delivery info was updated in ISO-8601 format.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'updated_at'?: string;
    /**
     * Estimated time of pickup in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_estimated'?: string;
    /**
     * Actual time of pickup in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_time_actual'?: string;
    /**
     * Estimated time of drop off in ISO-8601 format; null if already picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_estimated'?: string;
    /**
     * Actual time of drop off in ISO-8601 format; null if not yet picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_time_actual'?: string;
    /**
     * Estimated time of return in ISO-8601 format; null if delivery is not returnable or already returned.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_estimated'?: string;
    /**
     * Actual time of return in ISO-8601 format; null if return is not returnable or the return is not yet completed.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_time_actual'?: string;
    /**
     * If a delivery is being returned-to-pickup, this is the address where the delivery will be returned.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'return_address'?: string;
    /**
     * Delivery Fee in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'fee': number;
    /**
     * The charges that were applied for this delivery; sums to `fee`
     * @type {Array<FeeComponent>}
     * @memberof DeliveryResponse
     */
    'fee_components'?: Array<FeeComponent>;
    /**
     * Delivery tax in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599 or null if not available.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tax'?: number;
    /**
     * The taxes that were applied for this delivery; sums to `tax`. Only returned for deliveries in Canada.
     * @type {Array<TaxComponent>}
     * @memberof DeliveryResponse
     */
    'tax_components'?: Array<TaxComponent>;
    /**
     * Internal reference for this delivery; reference it when talking or writing to DoorDash support.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'support_reference'?: string;
    /**
     * Tracking page for the delivery that you can use or share with the sender and/or receiver of the delivery. Note: the URL format is not fixed and may change over time.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'tracking_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was dropped off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_verification_image_url'?: string;
    /**
     * Link to the picture taken by the Dasher to indicate where the order was picked up.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'pickup_verification_image_url'?: string;
    /**
     * Link to a picture of the dropoff contact\'s signature that was collected by the Dasher during drop off.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dropoff_signature_image_url'?: string;
    /**
     *
     * @type {ShippingLabel}
     * @memberof DeliveryResponse
     */
    'shipping_label'?: ShippingLabel;
    /**
     * The items that were dropped because they were not available or suspended and not considered as per the catalog for DSS/DSD Orders.
     * @type {Array<DroppedItem>}
     * @memberof DeliveryResponse
     */
    'dropped_items'?: Array<DroppedItem>;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof DeliveryResponse
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof DeliveryResponse
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof DeliveryResponse
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof DeliveryResponse
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof DeliveryResponse
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     *
     * @type {OrderRouteType}
     * @memberof DeliveryResponse
     */
    'order_route_type'?: OrderRouteType;
    /**
     *
     * @type {Array<OrderRouteItem>}
     * @memberof DeliveryResponse
     */
    'order_route_items'?: Array<OrderRouteItem>;
    /**
     * Unique identifier for the Dasher.
     * @type {number}
     * @memberof DeliveryResponse
     */
    'dasher_id'?: number;
    /**
     * First name and last initial of the Dasher delivering the order.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_name'?: string;
    /**
     * Phone number for the Dasher; can only be called from dropoff_phone_number. Should include the country code.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_dropoff_phone_number'?: string;
    /**
     * Phone number for the Dasher; can only be called from pickup_phone_number. Should include the country code.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_pickup_phone_number'?: string;
    /**
     *
     * @type {Location}
     * @memberof DeliveryResponse
     */
    'dasher_location'?: Location;
    /**
     * Make of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_make'?: string;
    /**
     * Model of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_model'?: string;
    /**
     * Year of the Dasher\'s vehicle.
     * @type {string}
     * @memberof DeliveryResponse
     */
    'dasher_vehicle_year'?: string;
}
export declare const DeliveryResponseDeliveryStatusEnum: {
    readonly Quote: "quote";
    readonly Created: "created";
    readonly Confirmed: "confirmed";
    readonly EnrouteToPickup: "enroute_to_pickup";
    readonly ArrivedAtPickup: "arrived_at_pickup";
    readonly PickedUp: "picked_up";
    readonly EnrouteToDropoff: "enroute_to_dropoff";
    readonly ArrivedAtDropoff: "arrived_at_dropoff";
    readonly Delivered: "delivered";
    readonly EnrouteToReturn: "enroute_to_return";
    readonly ArrivedAtReturn: "arrived_at_return";
    readonly Returned: "returned";
    readonly Cancelled: "cancelled";
};
export type DeliveryResponseDeliveryStatusEnum = typeof DeliveryResponseDeliveryStatusEnum[keyof typeof DeliveryResponseDeliveryStatusEnum];
export declare const DeliveryResponseCancellationReasonEnum: {
    readonly CancelledByCreator: "cancelled_by_creator";
    readonly FailedToProcessPayment: "failed_to_process_payment";
    readonly FailedToAssignAndRefunded: "failed_to_assign_and_refunded";
    readonly FailedToPickup: "failed_to_pickup";
    readonly FailedToDeliver: "failed_to_deliver";
    readonly FailedToReturn: "failed_to_return";
};
export type DeliveryResponseCancellationReasonEnum = typeof DeliveryResponseCancellationReasonEnum[keyof typeof DeliveryResponseCancellationReasonEnum];
/**
 * Details about how to shop and pay for the delivery
 * @export
 * @interface DeliveryShoppingOptions
 */
export interface DeliveryShoppingOptions {
    /**
     *
     * @type {ShoppingOptions}
     * @memberof DeliveryShoppingOptions
     */
    'shopping_options'?: ShoppingOptions;
}
/**
 * The subtotal for all items in the order, excluding tax/tip. Use cents or the equivalent lowest currency denomination (e.g. $19.99 = 1999).
 * @export
 * @interface DeliveryValueDetails
 */
export interface DeliveryValueDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryValueDetails
     */
    'order_value'?: number;
    /**
     * Currency of the order
     * @type {string}
     * @memberof DeliveryValueDetails
     */
    'currency'?: string;
}
/**
 * Delivery value input details.
 * @export
 * @interface DeliveryValueInputDetails
 */
export interface DeliveryValueInputDetails {
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof DeliveryValueInputDetails
     */
    'order_value'?: number;
}
/**
 * Drive item that has successfully passed audit or failed audit
 * @export
 * @interface DriveFailedAuditedItem
 */
export interface DriveFailedAuditedItem {
    /**
     * External ID of the item audited
     * @type {string}
     * @memberof DriveFailedAuditedItem
     */
    'external_item_id'?: string;
    /**
     * UPC scanned for the audited item
     * @type {string}
     * @memberof DriveFailedAuditedItem
     */
    'upc_scanned'?: string;
    /**
     *
     * @type {AuditFailedReason}
     * @memberof DriveFailedAuditedItem
     */
    'failed_reason'?: AuditFailedReason;
}
/**
 * Drive item that has successfully passed audit or failed audit
 * @export
 * @interface DriveSuccessfulAuditedItem
 */
export interface DriveSuccessfulAuditedItem {
    /**
     * External ID of the item audited
     * @type {string}
     * @memberof DriveSuccessfulAuditedItem
     */
    'external_item_id'?: string;
    /**
     * UPC scanned for the audited item
     * @type {string}
     * @memberof DriveSuccessfulAuditedItem
     */
    'upc_scanned'?: string;
}
/**
 * @type DropoffAddressComponents
 * The Dropoff address broken down into independent components.
 * @export
 */
export type DropoffAddressComponents = DropoffAddressComponentsAU | DropoffAddressComponentsCA | DropoffAddressComponentsNZ | DropoffAddressComponentsUS;
/**
 * Drop-off Address broken down by components for AU
 * @export
 * @interface DropoffAddressComponentsAU
 */
export interface DropoffAddressComponentsAU {
    /**
     * The street number and address of the drop-off location. If you have multiple lines, concatenate them with a comma. Do not include the unit number or slashes in the street address. Please pass them in the sub_premise field. For example, if the address is 21/17 Jones St, pass 17 Jones St
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'street_address'?: string;
    /**
     * Used to denote the unit number, flat number, suite number, or apartment number
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'sub_premise'?: string;
    /**
     * Delivery suburb / town for the address
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'locality'?: string;
    /**
     * State code for the address. Use the state abbreviation. For instance NSW for New South Wales, VIC for Victoria, etc.
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'territory'?: string;
    /**
     * Postal code for the address
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'postal_code'?: string;
    /**
     * Country needs to be passed as an ISO 3166 Alpha 2 code. If it is not a valid ISO ALPHA 2 code, you would receive a validation error. “AU” for Australia
     * @type {string}
     * @memberof DropoffAddressComponentsAU
     */
    'country'?: string;
}
/**
 * Drop-off Address broken down by components for CA
 * @export
 * @interface DropoffAddressComponentsCA
 */
export interface DropoffAddressComponentsCA {
    /**
     * The street address of the drop-off location. If you have multiple lines, concatenate them with a comma
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'street_address'?: string;
    /**
     * Used to denote the unit number, suite number or apartment number
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'sub_premise'?: string;
    /**
     * City for the address
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'city'?: string;
    /**
     * Province for the address. 2 letter province codes for Canadian addresses. For instance, “ON” for Ontario
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'province'?: string;
    /**
     * Postal code for the address
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'postal_code'?: string;
    /**
     * Country needs to be passed as an ISO 3166 Alpha 2 code. If it is not a valid ISO ALPHA 2 code, you would receive a validation error. “CA” for Canada
     * @type {string}
     * @memberof DropoffAddressComponentsCA
     */
    'country'?: string;
}
/**
 * Drop-off Address broken down by components for NZ
 * @export
 * @interface DropoffAddressComponentsNZ
 */
export interface DropoffAddressComponentsNZ {
    /**
     * The street address of the drop-off location. If you have multiple lines, concatenate them with a comma
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'street_address'?: string;
    /**
     * Used to denote the unit number, flat number, suite number, or apartment number
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'sub_premise'?: string;
    /**
     * Delivery suburb / town for the address
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'sub_locality'?: string;
    /**
     * Locality for the address
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'locality'?: string;
    /**
     * Postal code for the address
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'postal_code'?: string;
    /**
     * Country needs to be passed as an ISO 3166 Alpha 2 code. If it is not a valid ISO ALPHA 2 code, you would receive a validation error. “NZ” for New Zealand
     * @type {string}
     * @memberof DropoffAddressComponentsNZ
     */
    'country'?: string;
}
/**
 * Drop-off Address broken down by components for US
 * @export
 * @interface DropoffAddressComponentsUS
 */
export interface DropoffAddressComponentsUS {
    /**
     * The street address of the drop-off location. If you have multiple lines, concatenate them with a comma
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'street_address'?: string;
    /**
     * Used to denote the unit number, suite number or apartment number
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'sub_premise'?: string;
    /**
     * City for the address
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'city'?: string;
    /**
     * State for the address. 2 letter state codes for US addresses. For instance, “CA” for California
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'state'?: string;
    /**
     * Zip code for the address. 5 digit zip code for US addresses.
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'zip_code'?: string;
    /**
     * Country needs to be passed as an ISO 3166 Alpha 2 code. If it is not a valid ISO ALPHA 2 code, you would receive a validation error. “US” for United States of America. \"PR\" for Puerto Rico
     * @type {string}
     * @memberof DropoffAddressComponentsUS
     */
    'country'?: string;
}
/**
 * [Pre-release field: submit a ticket in the Developer Portal or reach out to your DoorDash contact if you would like to provide precise location information.] The precise location, as latitude and longitude, of the drop-off. If your request includes both location and address, location will be used for Dasher navigation only; address will be used for fee and serviceability checks.
 * @export
 * @interface DropoffLocation
 */
export interface DropoffLocation {
    /**
     * Latitude of the location
     * @type {number}
     * @memberof DropoffLocation
     */
    'lat': number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof DropoffLocation
     */
    'lng': number;
}
/**
 * Additional options for drop off
 * @export
 * @interface DropoffOptions
 */
export interface DropoffOptions {
    /**
     * Flag to specify if the delivery requires signature verification during drop off. Not updatable.
     * @type {string}
     * @memberof DropoffOptions
     */
    'signature'?: DropoffOptionsSignatureEnum;
    /**
     * Flag to specify if ID verification is required at drop-off. If order contains alcohol, this field needs to be set to \"required\". Not updatable.
     * @type {string}
     * @memberof DropoffOptions
     */
    'id_verification'?: DropoffOptionsIdVerificationEnum;
    /**
     * Flag to specify if the delivery requires proof of delivery during drop off. When \"pin_code\" is set as \"proof_of_delivery\", the \"dropoff_pin_code_verification_metadata\" must include relevant pin code data. Pin Code can be enabled only for orders that are non-contactless and not unattended deliveries. Please reach out to Doordash to enable this feature for your business. Not updatable. (\"photo_preferred\" is deprecated.)
     * @type {string}
     * @memberof DropoffOptions
     */
    'proof_of_delivery'?: DropoffOptionsProofOfDeliveryEnum;
    /**
     * Flag to specify if the delivery needs catering setup, only applicable to large order fulfillment delivery. Not updatable.
     * @type {string}
     * @memberof DropoffOptions
     */
    'catering_setup'?: DropoffOptionsCateringSetupEnum;
}
export declare const DropoffOptionsSignatureEnum: {
    readonly Required: "required";
    readonly Preferred: "preferred";
    readonly None: "none";
};
export type DropoffOptionsSignatureEnum = typeof DropoffOptionsSignatureEnum[keyof typeof DropoffOptionsSignatureEnum];
export declare const DropoffOptionsIdVerificationEnum: {
    readonly Required: "required";
    readonly Preferred: "preferred";
    readonly None: "none";
};
export type DropoffOptionsIdVerificationEnum = typeof DropoffOptionsIdVerificationEnum[keyof typeof DropoffOptionsIdVerificationEnum];
export declare const DropoffOptionsProofOfDeliveryEnum: {
    readonly PhotoRequired: "photo_required";
    readonly PhotoPreferred: "photo_preferred";
    readonly PinCode: "pin_code";
    readonly None: "none";
};
export type DropoffOptionsProofOfDeliveryEnum = typeof DropoffOptionsProofOfDeliveryEnum[keyof typeof DropoffOptionsProofOfDeliveryEnum];
export declare const DropoffOptionsCateringSetupEnum: {
    readonly Required: "required";
    readonly None: "none";
};
export type DropoffOptionsCateringSetupEnum = typeof DropoffOptionsCateringSetupEnum[keyof typeof DropoffOptionsCateringSetupEnum];
/**
 * An object that specifies the dropoff pin code verification related details for this order. When \"pin_code\" is set in \"dropoff_options.proof_of_delivery\", the object must include relevant pin code data. Conversely, if \"pin_code\" is not set as \"proof_of_delivery\", the object should exclude any pin code data. Pin Code can be enabled only for orders that are non-contactless and not unattended deliveries. Please reach out to Doordash to enable this feature for your business.
 * @export
 * @interface DropoffPinCodeVerificationMetadata
 */
export interface DropoffPinCodeVerificationMetadata {
    /**
     *
     * @type {PinCodeType}
     * @memberof DropoffPinCodeVerificationMetadata
     */
    'pin_code_type'?: PinCodeType;
    /**
     * The string identifier that implies the pin code to use during dropoff verification. This value should be sent only when the PinCodeType is \'merchant_provided_number\'.
     * @type {string}
     * @memberof DropoffPinCodeVerificationMetadata
     */
    'pin_code_value'?: string;
}
/**
 * The item that was dropped along with the item information and the reason for being dropped.
 * @export
 * @interface DroppedItem
 */
export interface DroppedItem {
    /**
     * The Merchant\'s External ID for the item.
     * @type {string}
     * @memberof DroppedItem
     */
    'external_id': string;
    /**
     * Type of the item dropped
     * @type {string}
     * @memberof DroppedItem
     */
    'type': DroppedItemTypeEnum;
    /**
     * Reason why the item was dropped
     * @type {string}
     * @memberof DroppedItem
     */
    'reason': DroppedItemReasonEnum;
}
export declare const DroppedItemTypeEnum: {
    readonly MainItem: "main_item";
    readonly SubstituteItem: "substitute_item";
};
export type DroppedItemTypeEnum = typeof DroppedItemTypeEnum[keyof typeof DroppedItemTypeEnum];
export declare const DroppedItemReasonEnum: {
    readonly NotFoundInCatalog: "item_not_found_in_catalog";
    readonly Suspended: "item_suspended";
    readonly NotConsidered: "item_not_considered";
};
export type DroppedItemReasonEnum = typeof DroppedItemReasonEnum[keyof typeof DroppedItemReasonEnum];
/**
 * Error returned when delivery creation request is duplicate and has a delivery already created for it.
 * @export
 * @interface DuplicateDeliveryIdError
 */
export interface DuplicateDeliveryIdError {
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'code': DuplicateDeliveryIdErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof DuplicateDeliveryIdError
     */
    'external_delivery_id': string;
}
export declare const DuplicateDeliveryIdErrorCodeEnum: {
    readonly DuplicateDeliveryId: "duplicate_delivery_id";
};
export type DuplicateDeliveryIdErrorCodeEnum = typeof DuplicateDeliveryIdErrorCodeEnum[keyof typeof DuplicateDeliveryIdErrorCodeEnum];
/**
 * Breakdown of the fee that was charged for this delivery; sums to `fee`.
 * @export
 * @interface FeeComponent
 */
export interface FeeComponent {
    /**
     * Name of the fee component.
     * @type {string}
     * @memberof FeeComponent
     */
    'type': FeeComponentTypeEnum;
    /**
     * Amount of the fee component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof FeeComponent
     */
    'amount': number;
}
export declare const FeeComponentTypeEnum: {
    readonly DriveFeeComponentTypeUnspecified: "drive_fee_component_type_unspecified";
    readonly DistanceBasedFee: "distance_based_fee";
    readonly OrderValueBasedFee: "order_value_based_fee";
    readonly ServiceFee: "service_fee";
    readonly MxSubsidy: "mx_subsidy";
    readonly Other: "other";
    readonly DasherRegulatoryFee: "dasher_regulatory_fee";
    readonly Promotion: "promotion";
    readonly SmallOrderFee: "small_order_fee";
    readonly FlatFee: "flat_fee";
    readonly DwtFee: "dwt_fee";
    readonly Unrecognized: "unrecognized";
};
export type FeeComponentTypeEnum = typeof FeeComponentTypeEnum[keyof typeof FeeComponentTypeEnum];
/**
 * A field whose value couldn\'t be validated.
 * @export
 * @interface FieldError
 */
export interface FieldError {
    /**
     * Name of the field whose value couldn\'t be validated.
     * @type {string}
     * @memberof FieldError
     */
    'field': string;
    /**
     * The error that was encountered when validating the field\'s value.
     * @type {string}
     * @memberof FieldError
     */
    'error': string;
}
/**
 *
 * @export
 * @interface InvalidDeliveryError
 */
export interface InvalidDeliveryError {
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'code': InvalidDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof InvalidDeliveryError
     */
    'reason': InvalidDeliveryErrorReasonEnum;
}
export declare const InvalidDeliveryErrorCodeEnum: {
    readonly InvalidDeliveryParameters: "invalid_delivery_parameters";
};
export type InvalidDeliveryErrorCodeEnum = typeof InvalidDeliveryErrorCodeEnum[keyof typeof InvalidDeliveryErrorCodeEnum];
export declare const InvalidDeliveryErrorReasonEnum: {
    readonly DistanceTooLong: "distance_too_long";
    readonly PickupAddressNotInCoverage: "pickup_address_not_in_coverage";
    readonly DeliveryAddressNotInCoverage: "delivery_address_not_in_coverage";
    readonly OutsideOfDeliveryTime: "outside_of_delivery_time";
};
export type InvalidDeliveryErrorReasonEnum = typeof InvalidDeliveryErrorReasonEnum[keyof typeof InvalidDeliveryErrorReasonEnum];
/**
 * Details about how to shop for an item. Not updatable.
 * @export
 * @interface ItemOptions
 */
export interface ItemOptions {
    /**
     * External IDs for items to be substituted if the original item is out of stock. Not updatable.
     * @type {Array<any>}
     * @memberof ItemOptions
     */
    'substitute_item_ids'?: Array<any>;
    /**
     * Merchant provided external IDs for items to be substituted if the original item is out of stock. Cannot be used simultaneously with substitute_item_ids. Not updatable.
     * @type {Array<any>}
     * @memberof ItemOptions
     */
    'merchant_recommended_substitute_item_ids'?: Array<any>;
    /**
     * The weight unit for the item being shopped. Not updatable.
     * @type {string}
     * @memberof ItemOptions
     */
    'weight_unit': ItemOptionsWeightUnitEnum;
    /**
     * Substitution preference to apply when an item is out of stock. Not updatable.
     * @type {string}
     * @memberof ItemOptions
     */
    'substitution_preference': ItemOptionsSubstitutionPreferenceEnum;
}
export declare const ItemOptionsWeightUnitEnum: {
    readonly Oz: "oz";
    readonly Lbs: "lbs";
    readonly Kg: "kg";
};
export type ItemOptionsWeightUnitEnum = typeof ItemOptionsWeightUnitEnum[keyof typeof ItemOptionsWeightUnitEnum];
export declare const ItemOptionsSubstitutionPreferenceEnum: {
    readonly Refund: "refund";
    readonly Contact: "contact";
    readonly Substitute: "substitute";
};
export type ItemOptionsSubstitutionPreferenceEnum = typeof ItemOptionsSubstitutionPreferenceEnum[keyof typeof ItemOptionsSubstitutionPreferenceEnum];
/**
 * Near-real-time location of the Dasher.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Latitude of the location.
     * @type {number}
     * @memberof Location
     */
    'lat': number;
    /**
     * Longitude of the location.
     * @type {number}
     * @memberof Location
     */
    'lng': number;
}
/**
 * An object that specifies the restricted item(s) contained in this order.
 * @export
 * @interface OrderContains
 */
export interface OrderContains {
    /**
     * Flag to specify if the delivery contains alcohol.
     * @type {boolean}
     * @memberof OrderContains
     */
    'alcohol'?: boolean;
    /**
     * Flag to specify if the delivery contains pharmacy items.
     * @type {boolean}
     * @memberof OrderContains
     */
    'pharmacy_items'?: boolean;
    /**
     * Flag to specify if the delivery contains age restricted pharmacy items. The order is an S3+ pharmacy order which requires ID Verification and can only be delivered to 18+/21+ year olds.
     * @type {boolean}
     * @memberof OrderContains
     */
    'age_restricted_pharmacy_items'?: boolean;
    /**
     * Flag to specify if the delivery contains tobacco items.
     * @type {boolean}
     * @memberof OrderContains
     */
    'tobacco'?: boolean;
    /**
     * Flag to specify if the delivery contains hemp items.
     * @type {boolean}
     * @memberof OrderContains
     */
    'hemp'?: boolean;
    /**
     * Flag to specify if the delivery contains otc items.
     * @type {boolean}
     * @memberof OrderContains
     */
    'otc'?: boolean;
}
/**
 * Type of fulfillment required for Delivery (\"shop_stage\" and \"shop_deliver\" for DSD/DSS delivery; \"parcel\" for parcel delivery. \"catering\" is deprecated.)
 * @export
 * @enum {string}
 */
export declare const OrderFulfillmentMethod: {
    readonly Standard: "standard";
    readonly Catering: "catering";
    readonly ShopStage: "shop_stage";
    readonly ShopDeliver: "shop_deliver";
    readonly Parcel: "parcel";
    readonly LargeOrder: "large_order";
};
export type OrderFulfillmentMethod = typeof OrderFulfillmentMethod[keyof typeof OrderFulfillmentMethod];
/**
 * Enum to specify route item, this is to be combined with the OrderRouteType field. For example, if OrderRouteType is roundtrip, then use OrderRouteItems to specify the item that need to be returned for the roundtrip.
 * @export
 * @enum {string}
 */
export declare const OrderRouteItem: {
    readonly Check: "check";
    readonly Cash: "cash";
};
export type OrderRouteItem = typeof OrderRouteItem[keyof typeof OrderRouteItem];
/**
 * Type of route required for the delivery (\"roundtrip\" for deliveries that require the Dasher to return to the pickup location after dropoff). If this field is not specified, the default type is the standard point to point delivery.
 * @export
 * @enum {string}
 */
export declare const OrderRouteType: {
    readonly Roundtrip: "roundtrip";
};
export type OrderRouteType = typeof OrderRouteType[keyof typeof OrderRouteType];
/**
 * The payment method to be used by the Dasher while shopping at the store. This is a required field for shop_deliver and shop_stage orders.
 * @export
 * @enum {string}
 */
export declare const PaymentMethod: {
    readonly RedCard: "red_card";
    readonly Barcode: "barcode";
    readonly ShopCard: "shop_card";
    readonly GiftCards: "gift_cards";
};
export type PaymentMethod = typeof PaymentMethod[keyof typeof PaymentMethod];
/**
 * Optional pickup verification metadata. Use this to enable order level pickup verification
 * @export
 * @interface PickupVerificationMetadata
 */
export interface PickupVerificationMetadata {
    /**
     * Enum to set type of verification.
     * @type {string}
     * @memberof PickupVerificationMetadata
     */
    'verification_type': PickupVerificationMetadataVerificationTypeEnum;
    /**
     * Code to verify upon pickup
     * @type {string}
     * @memberof PickupVerificationMetadata
     */
    'verification_code': string;
    /**
     * Enum to set any specific format to use for verification
     * @type {string}
     * @memberof PickupVerificationMetadata
     */
    'verification_format'?: PickupVerificationMetadataVerificationFormatEnum;
}
export declare const PickupVerificationMetadataVerificationTypeEnum: {
    readonly ScanBarcode: "SCAN_BARCODE";
    readonly ScanQrcode: "SCAN_QRCODE";
    readonly NoScan: "NO_SCAN";
};
export type PickupVerificationMetadataVerificationTypeEnum = typeof PickupVerificationMetadataVerificationTypeEnum[keyof typeof PickupVerificationMetadataVerificationTypeEnum];
export declare const PickupVerificationMetadataVerificationFormatEnum: {
    readonly QrCode: "QR_CODE";
    readonly Data: "DATA";
    readonly Atrix: "ATRIX";
    readonly Aztec: "AZTEC";
    readonly Code128: "CODE_128";
    readonly Code39: "CODE_39";
    readonly Code93: "CODE_93";
    readonly Codabar: "CODABAR";
    readonly Ean13: "EAN_13";
    readonly Ean8: "EAN_8";
    readonly Itf: "ITF";
    readonly UpcA: "UPC_A";
    readonly Pdf417: "PDF417";
};
export type PickupVerificationMetadataVerificationFormatEnum = typeof PickupVerificationMetadataVerificationFormatEnum[keyof typeof PickupVerificationMetadataVerificationFormatEnum];
/**
 * An enum that specifies the pin code value type. The values that can be specified are \'customer_phone_number\' (pin code for dropoff verification is the customer phone number\'s last 4 digits), \'merchant_provided_number\' (pin code for dropoff verification is the merchant provided 4 digit number), \'random_number\' (pin code for dropoff verification is the random 4 digit number generated by DD). The default is \'customer_phone_number\' if pin_code is enabled in the proof_of_delivery.
 * @export
 * @enum {string}
 */
export declare const PinCodeType: {
    readonly RandomNumber: "random_number";
    readonly CustomerPhoneNumber: "customer_phone_number";
    readonly MerchantProvidedNumber: "merchant_provided_number";
};
export type PinCodeType = typeof PinCodeType[keyof typeof PinCodeType];
/**
 * Internal service failure, please try again later.
 * @export
 * @interface ServerFault
 */
export interface ServerFault {
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'code': ServerFaultCodeEnum;
    /**
     *
     * @type {string}
     * @memberof ServerFault
     */
    'message': string;
}
export declare const ServerFaultCodeEnum: {
    readonly ServiceFault: "service_fault";
};
export type ServerFaultCodeEnum = typeof ServerFaultCodeEnum[keyof typeof ServerFaultCodeEnum];
/**
 * The label for a delivery.
 * @export
 * @interface ShippingLabel
 */
export interface ShippingLabel {
    /**
     * The file format of the label.
     * @type {string}
     * @memberof ShippingLabel
     */
    'label_format'?: ShippingLabelLabelFormatEnum;
    /**
     * The size of label.
     * @type {string}
     * @memberof ShippingLabel
     */
    'label_size'?: ShippingLabelLabelSizeEnum;
    /**
     * The printing density of label.
     * @type {string}
     * @memberof ShippingLabel
     */
    'print_density'?: ShippingLabelPrintDensityEnum;
    /**
     * A Base64-encoded string of label content.
     * @type {string}
     * @memberof ShippingLabel
     */
    'label_string'?: string;
}
export declare const ShippingLabelLabelFormatEnum: {
    readonly Zpl: "zpl";
    readonly Pdf: "pdf";
};
export type ShippingLabelLabelFormatEnum = typeof ShippingLabelLabelFormatEnum[keyof typeof ShippingLabelLabelFormatEnum];
export declare const ShippingLabelLabelSizeEnum: {
    readonly _4x6: "4x6";
};
export type ShippingLabelLabelSizeEnum = typeof ShippingLabelLabelSizeEnum[keyof typeof ShippingLabelLabelSizeEnum];
export declare const ShippingLabelPrintDensityEnum: {
    readonly _203dpi: "203dpi";
    readonly _300dpi: "300dpi";
};
export type ShippingLabelPrintDensityEnum = typeof ShippingLabelPrintDensityEnum[keyof typeof ShippingLabelPrintDensityEnum];
/**
 * Details about how to shop and pay for the delivery for shop_deliver and shop_stage orders
 * @export
 * @interface ShoppingOptions
 */
export interface ShoppingOptions {
    /**
     *
     * @type {PaymentMethod}
     * @memberof ShoppingOptions
     */
    'payment_method': PaymentMethod;
    /**
     * The token that will be scanned as a barcode at checkout lane as payment for the order in store.
     * @type {string}
     * @memberof ShoppingOptions
     */
    'payment_barcode'?: string;
    /**
     * List of gift cards use for payment
     * @type {Array<any>}
     * @memberof ShoppingOptions
     */
    'payment_gift_cards'?: Array<any>;
    /**
     * Estimated time for order pickup by customer in ISO-8601 format, only required for shop_stage orders.
     * @type {string}
     * @memberof ShoppingOptions
     */
    'ready_for_pickup_by'?: string;
    /**
     * Loyalty number for the Customer to be applied at the checkout lane.
     * @type {string}
     * @memberof ShoppingOptions
     */
    'dropoff_contact_loyalty_number': string;
}
/**
 * Breakdown of the taxes that were charged for this delivery; sums to `tax`. Only returned for deliveries in Canada.
 * @export
 * @interface TaxComponent
 */
export interface TaxComponent {
    /**
     * Name of the tax component.
     * @type {string}
     * @memberof TaxComponent
     */
    'type': TaxComponentTypeEnum;
    /**
     * Amount of the tax component in the lowest currency denomination (e.g. cents). i.e. $5.99 = 599
     * @type {number}
     * @memberof TaxComponent
     */
    'amount': number;
}
export declare const TaxComponentTypeEnum: {
    readonly TaxTypeUnspecified: "tax_type_unspecified";
    readonly GstHst: "gst_hst";
    readonly Qst: "qst";
    readonly Pst: "pst";
    readonly Unrecognized: "unrecognized";
};
export type TaxComponentTypeEnum = typeof TaxComponentTypeEnum[keyof typeof TaxComponentTypeEnum];
/**
 * The UTC date-time (in ISO-8601 format) overrides dropoff_time and pickup_time when all four parameters of the time window (pickup_window_start_time , pickup_window_end_time , dropoff_window_start_time , dropoff_window_end_time) are provided.
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'start_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof TimeWindow
     */
    'end_time'?: string;
}
/**
 * External delivery ID was not found.
 * @export
 * @interface UnknownDeliveryError
 */
export interface UnknownDeliveryError {
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'code': UnknownDeliveryErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'message': string;
    /**
     * Unique ID generated by the caller for the delivery.
     * @type {string}
     * @memberof UnknownDeliveryError
     */
    'external_delivery_id': string;
}
export declare const UnknownDeliveryErrorCodeEnum: {
    readonly UnknownDeliveryId: "unknown_delivery_id";
};
export type UnknownDeliveryErrorCodeEnum = typeof UnknownDeliveryErrorCodeEnum[keyof typeof UnknownDeliveryErrorCodeEnum];
/**
 *
 * @export
 * @interface UpdateDeliveryInput
 */
export interface UpdateDeliveryInput {
    /**
     * Comma-separated full address, in the order appropriate for your locale. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_business_name'?: string;
    /**
     * The phone number for the Dasher to call if there are any issues with the pick up. Should include the country code and must match the country of the store for which the delivery is created. Overridden by store properties if pickup_external_store_id and pickup_external_business_id are used. Must adhere to E.164 international phone number standard.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_instructions'?: string;
    /**
     * A reference that can help Dasher identify the correct delivery item for pick up/drop-off.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_reference_tag'?: string;
    /**
     * The string identifier used to create your business. Used in combination with pickup_external_store_id to select the pick up location. If you provide an pickup_external_business_id, you must also provide an pickup_external_store_id.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_business_id'?: string;
    /**
     * The string identifier used to create your store. If you provide an pickup_external_store_id, you must also provide an pickup_external_business_id. If you provide an pickup_external_store_id, the address of the store will override the pickup_address in the request.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_external_store_id'?: string;
    /**
     *
     * @type {PickupVerificationMetadata}
     * @memberof UpdateDeliveryInput
     */
    'pickup_verification_metadata'?: PickupVerificationMetadata;
    /**
     * Comma-separated full address, in the order appropriate for your locale.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_address'?: string;
    /**
     * Optional name of the place, to help Dashers find the location.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_business_name'?: string;
    /**
     *
     * @type {DropoffLocation}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_location'?: DropoffLocation;
    /**
     * The phone number for the Dasher to call if there are any issues with the delivery. Should include the country code. Must adhere to E.164 international phone number standard
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_phone_number'?: string;
    /**
     * Instructions for the Dasher to follow when picking up the order.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_instructions'?: string;
    /**
     * Given/first name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_given_name'?: string;
    /**
     * Family/last name of the contact.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_family_name'?: string;
    /**
     * Whether the contact will receive notifications from DoorDash for this delivery. The default is true.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_contact_send_notifications'?: boolean;
    /**
     *
     * @type {DropoffOptions}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_options'?: DropoffOptions;
    /**
     *
     * @type {DropoffAddressComponents}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_address_components'?: DropoffAddressComponents;
    /**
     *
     * @type {DropoffPinCodeVerificationMetadata}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_pin_code_verification_metadata'?: DropoffPinCodeVerificationMetadata;
    /**
     * Whether the delivery should be contactless, which prompts a Dasher to take a picture of the delivery at drop-off.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'contactless_dropoff'?: boolean;
    /**
     *
     * @type {ActionIfUndeliverable}
     * @memberof UpdateDeliveryInput
     */
    'action_if_undeliverable'?: ActionIfUndeliverable;
    /**
     * The tip amount. Use cents or the equivalent lowest currency denomination (e.g. $5.99 = 599).
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'tip'?: number;
    /**
     *
     * @type {OrderContains}
     * @memberof UpdateDeliveryInput
     */
    'order_contains'?: OrderContains;
    /**
     * The vehicle type(s) that a Dasher can use to complete this delivery. The default is \"car\".
     * @type {Array<DasherVehicleType>}
     * @memberof UpdateDeliveryInput
     */
    'dasher_allowed_vehicles'?: Array<DasherVehicleType>;
    /**
     * Whether the delivery requires signature verification during drop-off.
     * @type {boolean}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_requires_signature'?: boolean;
    /**
     * The ID of the promotion that you want to apply to the delivery. If the promotion ID is valid and the promotion is active, the response `fee` will be adjusted according to the details of the promotion. Create a [support ticket](https://developer.doordash.com/portal/support) to setup a promotion or if your promotion ID isn\'t working.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'promotion_id'?: string;
    /**
     * The cash to collect when this order is dropped off, value in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999. [Pre-release field: [Submit a ticket](https://developer.doordash.com/portal/support) or reach out to your DoorDash contact if you would like to accept cash on delivery.]
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_cash_on_delivery'?: number;
    /**
     *
     * @type {OrderRouteType}
     * @memberof UpdateDeliveryInput
     */
    'order_route_type'?: OrderRouteType;
    /**
     *
     * @type {Array<OrderRouteItem>}
     * @memberof UpdateDeliveryInput
     */
    'order_route_items'?: Array<OrderRouteItem>;
    /**
     * The subtotal for all items in the order, excluding tax/tip, in the lowest currency denomination (e.g. cents). i.e. $19.99 = 1999.
     * @type {number}
     * @memberof UpdateDeliveryInput
     */
    'order_value'?: number;
    /**
     * The items included in the order.
     * @type {Array<DeliveryItem>}
     * @memberof UpdateDeliveryInput
     */
    'items'?: Array<DeliveryItem>;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'pickup_time'?: string;
    /**
     * Time details in ISO-8601 format.
     * @type {string}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_time'?: string;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'pickup_window'?: TimeWindow;
    /**
     *
     * @type {TimeWindow}
     * @memberof UpdateDeliveryInput
     */
    'dropoff_window'?: TimeWindow;
}
/**
 *
 * @export
 * @interface UpdateNotAllowedError
 */
export interface UpdateNotAllowedError {
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'code': UpdateNotAllowedErrorCodeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'message': string;
    /**
     *
     * @type {string}
     * @memberof UpdateNotAllowedError
     */
    'reason': UpdateNotAllowedErrorReasonEnum;
}
export declare const UpdateNotAllowedErrorCodeEnum: {
    readonly UpdateNotAllowed: "update_not_allowed";
};
export type UpdateNotAllowedErrorCodeEnum = typeof UpdateNotAllowedErrorCodeEnum[keyof typeof UpdateNotAllowedErrorCodeEnum];
export declare const UpdateNotAllowedErrorReasonEnum: {
    readonly DeliveryCancelled: "delivery_cancelled";
    readonly DeliveryCompleted: "delivery_completed";
    readonly DeliveryCreationInProgress: "delivery_creation_in_progress";
    readonly DeliveryPickedUp: "delivery_picked_up";
    readonly DeliveryAbandoned: "delivery_abandoned";
    readonly UpdateWindowClosed: "update_window_closed";
};
export type UpdateNotAllowedErrorReasonEnum = typeof UpdateNotAllowedErrorReasonEnum[keyof typeof UpdateNotAllowedErrorReasonEnum];
/**
 * One or more request values couldn\'t be validated.
 * @export
 * @interface ValidationFieldError
 */
export interface ValidationFieldError {
    /**
     *
     * @type {string}
     * @memberof ValidationFieldError
     */
    'code': ValidationFieldErrorCodeEnum;
    /**
     * One or more request values couldn\'t be validated.
     * @type {string}
     * @memberof ValidationFieldError
     */
    'message': string;
    /**
     * The list of fields whose values couldn\'t be validated. See more [error examples](https://developer.doordash.com/en-US/docs/drive/reference/errors)
     * @type {Array<FieldError>}
     * @memberof ValidationFieldError
     */
    'field_errors': Array<FieldError>;
}
export declare const ValidationFieldErrorCodeEnum: {
    readonly ValidationError: "validation_error";
};
export type ValidationFieldErrorCodeEnum = typeof ValidationFieldErrorCodeEnum[keyof typeof ValidationFieldErrorCodeEnum];
/**
 * AuditApi - axios parameter creator
 * @export
 */
export declare const AuditApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new audit signal for virtual checkout for a specified delivery
     * @summary Create Checkout Audit Signal
     * @param {CheckoutAuditSignalInput} checkoutAuditSignalInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkoutAuditSignal: (checkoutAuditSignalInput: CheckoutAuditSignalInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuditApi - functional programming interface
 * @export
 */
export declare const AuditApiFp: (configuration?: Configuration) => {
    /**
     * Create a new audit signal for virtual checkout for a specified delivery
     * @summary Create Checkout Audit Signal
     * @param {CheckoutAuditSignalInput} checkoutAuditSignalInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkoutAuditSignal(checkoutAuditSignalInput: CheckoutAuditSignalInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutAuditSignalResponse>>;
};
/**
 * AuditApi - factory interface
 * @export
 */
export declare const AuditApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new audit signal for virtual checkout for a specified delivery
     * @summary Create Checkout Audit Signal
     * @param {CheckoutAuditSignalInput} checkoutAuditSignalInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkoutAuditSignal(checkoutAuditSignalInput: CheckoutAuditSignalInput, options?: RawAxiosRequestConfig): AxiosPromise<CheckoutAuditSignalResponse>;
};
/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export declare class AuditApi extends BaseAPI {
    /**
     * Create a new audit signal for virtual checkout for a specified delivery
     * @summary Create Checkout Audit Signal
     * @param {CheckoutAuditSignalInput} checkoutAuditSignalInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    checkoutAuditSignal(checkoutAuditSignalInput: CheckoutAuditSignalInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CheckoutAuditSignalResponse, any>>;
}
/**
 * DeliveryApi - axios parameter creator
 * @export
 */
export declare const DeliveryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery: (externalDeliveryId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery: (createDeliveryInput: CreateDeliveryInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote: (deliveryQuoteInput: DeliveryQuoteInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept: (externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery: (externalDeliveryId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery: (externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeliveryApi - functional programming interface
 * @export
 */
export declare const DeliveryApiFp: (configuration?: Configuration) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryResponse>>;
};
/**
 * DeliveryApi - factory interface
 * @export
 */
export declare const DeliveryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryResponse>;
};
/**
 * DeliveryApi - object-oriented interface
 * @export
 * @class DeliveryApi
 * @extends {BaseAPI}
 */
export declare class DeliveryApi extends BaseAPI {
    /**
     * Cancel a delivery. Deliveries can\'t be cancelled after a Dasher is assigned.
     * @summary Cancel Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    cancelDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Create a delivery. Learn how to use this API in one of our tutorials: [call the API directly from any language or tool](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started), [create deliveries using our Node.js SDK](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_sdk), or [use Postman to call the APIs](https://developer.doordash.com/en-US/docs/drive/tutorials/get_started_postman).
     * @summary Create Delivery
     * @param {CreateDeliveryInput} createDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    createDelivery(createDeliveryInput: CreateDeliveryInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Confirm that a delivery is serviceable by DoorDash and what it would cost by creating a quote. Get a quote on delivery fee and validate coverage. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Create Quote
     * @param {DeliveryQuoteInput} deliveryQuoteInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuote(deliveryQuoteInput: DeliveryQuoteInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * When you’re happy with the quote you created, start the delivery process by accepting the quote. Learn how to use this API in the [Create & Accept Quotes how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/quote_deliveries).
     * @summary Accept Quote
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {DeliveryQuoteAcceptInput} [deliveryQuoteAcceptInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    deliveryQuoteAccept(externalDeliveryId: string, deliveryQuoteAcceptInput?: DeliveryQuoteAcceptInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Get the status and details of a delivery that you created. If you want to proactively receive updates about your delivery, set up [webhooks using the webhooks how-to guide](https://developer.doordash.com/en-US/docs/drive/how_to/webhooks).
     * @summary Get Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    getDelivery(externalDeliveryId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
    /**
     * Update the details of a delivery. Only the fields listed below can be updated; to update other fields, you need to cancel the delivery and then create a new one.
     * @summary Update Delivery
     * @param {string} externalDeliveryId Unique (per developer) ID of the delivery.
     * @param {UpdateDeliveryInput} updateDeliveryInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    updateDelivery(externalDeliveryId: string, updateDeliveryInput: UpdateDeliveryInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeliveryResponse, any>>;
}
